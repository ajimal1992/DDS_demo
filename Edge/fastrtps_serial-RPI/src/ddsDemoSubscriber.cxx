// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file ddsDemoSubscriber.cpp
 * This file contains the implementation of the subscriber functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#define DATASIZE 10

#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/subscriber/Subscriber.h>
#include <fastrtps/attributes/SubscriberAttributes.h>

#include <fastrtps/Domain.h>

#include "ddsDemoSubscriber.h"
#include "serial.h"

//define serial port to use
std::string port("/dev/lampposts");
//define baud rate to use
unsigned long baud = 115200;
serial::Serial my_serial(port, baud, serial::Timeout::simpleTimeout(100));


ddsDemoSubscriber::ddsDemoSubscriber() : mp_participant(nullptr), LPCTRL_reader(nullptr) {}

ddsDemoSubscriber::~ddsDemoSubscriber() {	Domain::removeParticipant(mp_participant);}

bool ddsDemoSubscriber::init()
{
	// Create RTPSParticipant
	
	ParticipantAttributes PParam;
	PParam.rtps.builtin.domainId = 0; //MUST BE THE SAME AS IN THE PUBLISHER
	PParam.rtps.builtin.leaseDuration = c_TimeInfinite;
	PParam.rtps.setName("Participant_subscriber"); //You can put the name you want
	mp_participant = Domain::createParticipant(PParam);
	if(mp_participant == nullptr)
			return false;
	
	//Register the type
	Domain::registerType(mp_participant,(TopicDataType*) &LPCTRL_type);			
			
	// Create Subscriber

	SubscriberAttributes Rparam2;
	Rparam2.topic.topicKind = WITH_KEY;
	Rparam2.topic.topicDataType = LPCTRL_type.getName();  //This type MUST be registered
	Rparam2.topic.topicName = LPCTRL_type.getName();
	LPCTRL_reader = Domain::createSubscriber(mp_participant,Rparam2,(SubscriberListener*)&m_listener);
	if(LPCTRL_reader == nullptr)
		return false;
	std::cout << "LamppostsCtrl reader initiated" << std::endl;
	return true;
}

void ddsDemoSubscriber::SubListener::onSubscriptionMatched(Subscriber* sub,MatchingInfo& info)
{
	if (info.status == MATCHED_MATCHING)
	{
		n_matched++;
		std::cout << "Subscriber matched: " << sub->getAttributes().topic.getTopicName() << std::endl;
	}
	else
	{
		n_matched--;
		std::cout << "Subscriber unmatched" << std::endl;
	}
}

void ddsDemoSubscriber::SubListener::onNewDataMessage(Subscriber* sub)
{
	// std::cout<< "Topic Name: " << sub->getAttributes().topic.getTopicName() <<std::endl;
	std::string topicName = sub->getAttributes().topic.getTopicName();
	if(topicName.compare("LamppostsCtrl") == 0){ //LamppostsCtrl
		LamppostsCtrl LP;
		if(sub->takeNextData(&LP, &m_info)){
			if(m_info.sampleKind == ALIVE){
				bool value = LP.value();
				std::string clusterID = LP.clusterID();
				clusterID += ":";
				if(value)
					clusterID += "1";
				else
					clusterID +=  "0";
				clusterID += "$";
				std::cout<<"Encoded msg: " << clusterID << std::endl;
				my_serial.write(clusterID);
				++n_msg;
			}	
		}
	}		
	std::cout << std::endl;
}

void ddsDemoSubscriber::run()
{
	std::cout << "Waiting for Data, press Enter to stop the Subscriber. "<<std::endl;
	std::cin.ignore();
	std::cout << "Shutting down the Subscriber." << std::endl;
}
