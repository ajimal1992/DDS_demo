// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file ddsDemo.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _ddsDemo_H_
#define _ddsDemo_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ddsDemo_SOURCE)
#define ddsDemo_DllAPI __declspec( dllexport )
#else
#define ddsDemo_DllAPI __declspec( dllimport )
#endif // ddsDemo_SOURCE
#else
#define ddsDemo_DllAPI
#endif
#else
#define ddsDemo_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

/*!
 * @brief This class represents the structure LamppostsCtrl defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class LamppostsCtrl
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LamppostsCtrl();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LamppostsCtrl();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object LamppostsCtrl that will be copied.
     */
    eProsima_user_DllExport LamppostsCtrl(const LamppostsCtrl &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object LamppostsCtrl that will be copied.
     */
    eProsima_user_DllExport LamppostsCtrl(LamppostsCtrl &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object LamppostsCtrl that will be copied.
     */
    eProsima_user_DllExport LamppostsCtrl& operator=(const LamppostsCtrl &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object LamppostsCtrl that will be copied.
     */
    eProsima_user_DllExport LamppostsCtrl& operator=(LamppostsCtrl &&x);
    
    /*!
     * @brief This function copies the value in member clusterID
     * @param _clusterID New value to be copied in member clusterID
     */
    inline eProsima_user_DllExport void clusterID(const std::string &_clusterID)
    {
        m_clusterID = _clusterID;
    }

    /*!
     * @brief This function moves the value in member clusterID
     * @param _clusterID New value to be moved in member clusterID
     */
    inline eProsima_user_DllExport void clusterID(std::string &&_clusterID)
    {
        m_clusterID = std::move(_clusterID);
    }

    /*!
     * @brief This function returns a constant reference to member clusterID
     * @return Constant reference to member clusterID
     */
    inline eProsima_user_DllExport const std::string& clusterID() const
    {
        return m_clusterID;
    }

    /*!
     * @brief This function returns a reference to member clusterID
     * @return Reference to member clusterID
     */
    inline eProsima_user_DllExport std::string& clusterID()
    {
        return m_clusterID;
    }
    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    inline eProsima_user_DllExport void value(bool _value)
    {
        m_value = _value;
    }

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    inline eProsima_user_DllExport bool value() const
    {
        return m_value;
    }

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    inline eProsima_user_DllExport bool& value()
    {
        return m_value;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const LamppostsCtrl& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    std::string m_clusterID;
    bool m_value;
};
/*!
 * @brief This class represents the structure LamppostsBC defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class LamppostsBC
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LamppostsBC();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LamppostsBC();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object LamppostsBC that will be copied.
     */
    eProsima_user_DllExport LamppostsBC(const LamppostsBC &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object LamppostsBC that will be copied.
     */
    eProsima_user_DllExport LamppostsBC(LamppostsBC &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object LamppostsBC that will be copied.
     */
    eProsima_user_DllExport LamppostsBC& operator=(const LamppostsBC &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object LamppostsBC that will be copied.
     */
    eProsima_user_DllExport LamppostsBC& operator=(LamppostsBC &&x);
    
    /*!
     * @brief This function copies the value in member clusterID
     * @param _clusterID New value to be copied in member clusterID
     */
    inline eProsima_user_DllExport void clusterID(const std::string &_clusterID)
    {
        m_clusterID = _clusterID;
    }

    /*!
     * @brief This function moves the value in member clusterID
     * @param _clusterID New value to be moved in member clusterID
     */
    inline eProsima_user_DllExport void clusterID(std::string &&_clusterID)
    {
        m_clusterID = std::move(_clusterID);
    }

    /*!
     * @brief This function returns a constant reference to member clusterID
     * @return Constant reference to member clusterID
     */
    inline eProsima_user_DllExport const std::string& clusterID() const
    {
        return m_clusterID;
    }

    /*!
     * @brief This function returns a reference to member clusterID
     * @return Reference to member clusterID
     */
    inline eProsima_user_DllExport std::string& clusterID()
    {
        return m_clusterID;
    }
    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    inline eProsima_user_DllExport void value(bool _value)
    {
        m_value = _value;
    }

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    inline eProsima_user_DllExport bool value() const
    {
        return m_value;
    }

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    inline eProsima_user_DllExport bool& value()
    {
        return m_value;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const LamppostsBC& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    std::string m_clusterID;
    bool m_value;
};
/*!
 * @brief This class represents the structure Trafficlight defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class Trafficlight
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Trafficlight();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Trafficlight();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Trafficlight that will be copied.
     */
    eProsima_user_DllExport Trafficlight(const Trafficlight &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Trafficlight that will be copied.
     */
    eProsima_user_DllExport Trafficlight(Trafficlight &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Trafficlight that will be copied.
     */
    eProsima_user_DllExport Trafficlight& operator=(const Trafficlight &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object Trafficlight that will be copied.
     */
    eProsima_user_DllExport Trafficlight& operator=(Trafficlight &&x);
    
    /*!
     * @brief This function copies the value in member ID
     * @param _ID New value to be copied in member ID
     */
    inline eProsima_user_DllExport void ID(const std::string &_ID)
    {
        m_ID = _ID;
    }

    /*!
     * @brief This function moves the value in member ID
     * @param _ID New value to be moved in member ID
     */
    inline eProsima_user_DllExport void ID(std::string &&_ID)
    {
        m_ID = std::move(_ID);
    }

    /*!
     * @brief This function returns a constant reference to member ID
     * @return Constant reference to member ID
     */
    inline eProsima_user_DllExport const std::string& ID() const
    {
        return m_ID;
    }

    /*!
     * @brief This function returns a reference to member ID
     * @return Reference to member ID
     */
    inline eProsima_user_DllExport std::string& ID()
    {
        return m_ID;
    }
    /*!
     * @brief This function sets a value in member state
     * @param _state New value for member state
     */
    inline eProsima_user_DllExport void state(char _state)
    {
        m_state = _state;
    }

    /*!
     * @brief This function returns the value of member state
     * @return Value of member state
     */
    inline eProsima_user_DllExport char state() const
    {
        return m_state;
    }

    /*!
     * @brief This function returns a reference to member state
     * @return Reference to member state
     */
    inline eProsima_user_DllExport char& state()
    {
        return m_state;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const Trafficlight& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    std::string m_ID;
    char m_state;
};
/*!
 * @brief This class represents the structure Priority defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class Priority
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Priority();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Priority();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Priority that will be copied.
     */
    eProsima_user_DllExport Priority(const Priority &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Priority that will be copied.
     */
    eProsima_user_DllExport Priority(Priority &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Priority that will be copied.
     */
    eProsima_user_DllExport Priority& operator=(const Priority &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object Priority that will be copied.
     */
    eProsima_user_DllExport Priority& operator=(Priority &&x);
    
    /*!
     * @brief This function copies the value in member ID
     * @param _ID New value to be copied in member ID
     */
    inline eProsima_user_DllExport void ID(const std::string &_ID)
    {
        m_ID = _ID;
    }

    /*!
     * @brief This function moves the value in member ID
     * @param _ID New value to be moved in member ID
     */
    inline eProsima_user_DllExport void ID(std::string &&_ID)
    {
        m_ID = std::move(_ID);
    }

    /*!
     * @brief This function returns a constant reference to member ID
     * @return Constant reference to member ID
     */
    inline eProsima_user_DllExport const std::string& ID() const
    {
        return m_ID;
    }

    /*!
     * @brief This function returns a reference to member ID
     * @return Reference to member ID
     */
    inline eProsima_user_DllExport std::string& ID()
    {
        return m_ID;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const Priority& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    std::string m_ID;
};
/*!
 * @brief This class represents the structure Humidity defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class Humidity
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Humidity();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Humidity();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Humidity that will be copied.
     */
    eProsima_user_DllExport Humidity(const Humidity &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Humidity that will be copied.
     */
    eProsima_user_DllExport Humidity(Humidity &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Humidity that will be copied.
     */
    eProsima_user_DllExport Humidity& operator=(const Humidity &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object Humidity that will be copied.
     */
    eProsima_user_DllExport Humidity& operator=(Humidity &&x);
    
    /*!
     * @brief This function copies the value in member sensor_id
     * @param _sensor_id New value to be copied in member sensor_id
     */
    inline eProsima_user_DllExport void sensor_id(const std::string &_sensor_id)
    {
        m_sensor_id = _sensor_id;
    }

    /*!
     * @brief This function moves the value in member sensor_id
     * @param _sensor_id New value to be moved in member sensor_id
     */
    inline eProsima_user_DllExport void sensor_id(std::string &&_sensor_id)
    {
        m_sensor_id = std::move(_sensor_id);
    }

    /*!
     * @brief This function returns a constant reference to member sensor_id
     * @return Constant reference to member sensor_id
     */
    inline eProsima_user_DllExport const std::string& sensor_id() const
    {
        return m_sensor_id;
    }

    /*!
     * @brief This function returns a reference to member sensor_id
     * @return Reference to member sensor_id
     */
    inline eProsima_user_DllExport std::string& sensor_id()
    {
        return m_sensor_id;
    }
    /*!
     * @brief This function sets a value in member sensor_val
     * @param _sensor_val New value for member sensor_val
     */
    inline eProsima_user_DllExport void sensor_val(float _sensor_val)
    {
        m_sensor_val = _sensor_val;
    }

    /*!
     * @brief This function returns the value of member sensor_val
     * @return Value of member sensor_val
     */
    inline eProsima_user_DllExport float sensor_val() const
    {
        return m_sensor_val;
    }

    /*!
     * @brief This function returns a reference to member sensor_val
     * @return Reference to member sensor_val
     */
    inline eProsima_user_DllExport float& sensor_val()
    {
        return m_sensor_val;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const Humidity& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    std::string m_sensor_id;
    float m_sensor_val;
};
/*!
 * @brief This class represents the structure Temperature defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class Temperature
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Temperature();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Temperature();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Temperature that will be copied.
     */
    eProsima_user_DllExport Temperature(const Temperature &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Temperature that will be copied.
     */
    eProsima_user_DllExport Temperature(Temperature &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Temperature that will be copied.
     */
    eProsima_user_DllExport Temperature& operator=(const Temperature &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object Temperature that will be copied.
     */
    eProsima_user_DllExport Temperature& operator=(Temperature &&x);
    
    /*!
     * @brief This function copies the value in member sensor_id
     * @param _sensor_id New value to be copied in member sensor_id
     */
    inline eProsima_user_DllExport void sensor_id(const std::string &_sensor_id)
    {
        m_sensor_id = _sensor_id;
    }

    /*!
     * @brief This function moves the value in member sensor_id
     * @param _sensor_id New value to be moved in member sensor_id
     */
    inline eProsima_user_DllExport void sensor_id(std::string &&_sensor_id)
    {
        m_sensor_id = std::move(_sensor_id);
    }

    /*!
     * @brief This function returns a constant reference to member sensor_id
     * @return Constant reference to member sensor_id
     */
    inline eProsima_user_DllExport const std::string& sensor_id() const
    {
        return m_sensor_id;
    }

    /*!
     * @brief This function returns a reference to member sensor_id
     * @return Reference to member sensor_id
     */
    inline eProsima_user_DllExport std::string& sensor_id()
    {
        return m_sensor_id;
    }
    /*!
     * @brief This function sets a value in member sensor_val
     * @param _sensor_val New value for member sensor_val
     */
    inline eProsima_user_DllExport void sensor_val(float _sensor_val)
    {
        m_sensor_val = _sensor_val;
    }

    /*!
     * @brief This function returns the value of member sensor_val
     * @return Value of member sensor_val
     */
    inline eProsima_user_DllExport float sensor_val() const
    {
        return m_sensor_val;
    }

    /*!
     * @brief This function returns a reference to member sensor_val
     * @return Reference to member sensor_val
     */
    inline eProsima_user_DllExport float& sensor_val()
    {
        return m_sensor_val;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const Temperature& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    std::string m_sensor_id;
    float m_sensor_val;
};
/*!
 * @brief This class represents the structure Light defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class Light
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Light();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Light();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Light that will be copied.
     */
    eProsima_user_DllExport Light(const Light &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Light that will be copied.
     */
    eProsima_user_DllExport Light(Light &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Light that will be copied.
     */
    eProsima_user_DllExport Light& operator=(const Light &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object Light that will be copied.
     */
    eProsima_user_DllExport Light& operator=(Light &&x);
    
    /*!
     * @brief This function copies the value in member sensor_id
     * @param _sensor_id New value to be copied in member sensor_id
     */
    inline eProsima_user_DllExport void sensor_id(const std::string &_sensor_id)
    {
        m_sensor_id = _sensor_id;
    }

    /*!
     * @brief This function moves the value in member sensor_id
     * @param _sensor_id New value to be moved in member sensor_id
     */
    inline eProsima_user_DllExport void sensor_id(std::string &&_sensor_id)
    {
        m_sensor_id = std::move(_sensor_id);
    }

    /*!
     * @brief This function returns a constant reference to member sensor_id
     * @return Constant reference to member sensor_id
     */
    inline eProsima_user_DllExport const std::string& sensor_id() const
    {
        return m_sensor_id;
    }

    /*!
     * @brief This function returns a reference to member sensor_id
     * @return Reference to member sensor_id
     */
    inline eProsima_user_DllExport std::string& sensor_id()
    {
        return m_sensor_id;
    }
    /*!
     * @brief This function sets a value in member sensor_val
     * @param _sensor_val New value for member sensor_val
     */
    inline eProsima_user_DllExport void sensor_val(char _sensor_val)
    {
        m_sensor_val = _sensor_val;
    }

    /*!
     * @brief This function returns the value of member sensor_val
     * @return Value of member sensor_val
     */
    inline eProsima_user_DllExport char sensor_val() const
    {
        return m_sensor_val;
    }

    /*!
     * @brief This function returns a reference to member sensor_val
     * @return Reference to member sensor_val
     */
    inline eProsima_user_DllExport char& sensor_val()
    {
        return m_sensor_val;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const Light& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    std::string m_sensor_id;
    char m_sensor_val;
};
/*!
 * @brief This class represents the structure Speeding defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class Speeding
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Speeding();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Speeding();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Speeding that will be copied.
     */
    eProsima_user_DllExport Speeding(const Speeding &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Speeding that will be copied.
     */
    eProsima_user_DllExport Speeding(Speeding &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Speeding that will be copied.
     */
    eProsima_user_DllExport Speeding& operator=(const Speeding &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object Speeding that will be copied.
     */
    eProsima_user_DllExport Speeding& operator=(Speeding &&x);
    
    /*!
     * @brief This function copies the value in member sensor_id
     * @param _sensor_id New value to be copied in member sensor_id
     */
    inline eProsima_user_DllExport void sensor_id(const std::string &_sensor_id)
    {
        m_sensor_id = _sensor_id;
    }

    /*!
     * @brief This function moves the value in member sensor_id
     * @param _sensor_id New value to be moved in member sensor_id
     */
    inline eProsima_user_DllExport void sensor_id(std::string &&_sensor_id)
    {
        m_sensor_id = std::move(_sensor_id);
    }

    /*!
     * @brief This function returns a constant reference to member sensor_id
     * @return Constant reference to member sensor_id
     */
    inline eProsima_user_DllExport const std::string& sensor_id() const
    {
        return m_sensor_id;
    }

    /*!
     * @brief This function returns a reference to member sensor_id
     * @return Reference to member sensor_id
     */
    inline eProsima_user_DllExport std::string& sensor_id()
    {
        return m_sensor_id;
    }
    /*!
     * @brief This function sets a value in member sensor_val
     * @param _sensor_val New value for member sensor_val
     */
    inline eProsima_user_DllExport void sensor_val(bool _sensor_val)
    {
        m_sensor_val = _sensor_val;
    }

    /*!
     * @brief This function returns the value of member sensor_val
     * @return Value of member sensor_val
     */
    inline eProsima_user_DllExport bool sensor_val() const
    {
        return m_sensor_val;
    }

    /*!
     * @brief This function returns a reference to member sensor_val
     * @return Reference to member sensor_val
     */
    inline eProsima_user_DllExport bool& sensor_val()
    {
        return m_sensor_val;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const Speeding& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    std::string m_sensor_id;
    bool m_sensor_val;
};
/*!
 * @brief This class represents the structure GeoLocation defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class GeoLocation
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport GeoLocation();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~GeoLocation();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object GeoLocation that will be copied.
     */
    eProsima_user_DllExport GeoLocation(const GeoLocation &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object GeoLocation that will be copied.
     */
    eProsima_user_DllExport GeoLocation(GeoLocation &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object GeoLocation that will be copied.
     */
    eProsima_user_DllExport GeoLocation& operator=(const GeoLocation &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object GeoLocation that will be copied.
     */
    eProsima_user_DllExport GeoLocation& operator=(GeoLocation &&x);
    
    /*!
     * @brief This function copies the value in member sensor_id
     * @param _sensor_id New value to be copied in member sensor_id
     */
    inline eProsima_user_DllExport void sensor_id(const std::string &_sensor_id)
    {
        m_sensor_id = _sensor_id;
    }

    /*!
     * @brief This function moves the value in member sensor_id
     * @param _sensor_id New value to be moved in member sensor_id
     */
    inline eProsima_user_DllExport void sensor_id(std::string &&_sensor_id)
    {
        m_sensor_id = std::move(_sensor_id);
    }

    /*!
     * @brief This function returns a constant reference to member sensor_id
     * @return Constant reference to member sensor_id
     */
    inline eProsima_user_DllExport const std::string& sensor_id() const
    {
        return m_sensor_id;
    }

    /*!
     * @brief This function returns a reference to member sensor_id
     * @return Reference to member sensor_id
     */
    inline eProsima_user_DllExport std::string& sensor_id()
    {
        return m_sensor_id;
    }
    /*!
     * @brief This function copies the value in member sensor_val
     * @param _sensor_val New value to be copied in member sensor_val
     */
    inline eProsima_user_DllExport void sensor_val(const char &_sensor_val)
    {
        m_sensor_val = _sensor_val;
    }

    /*!
     * @brief This function moves the value in member sensor_val
     * @param _sensor_val New value to be moved in member sensor_val
     */
    inline eProsima_user_DllExport void sensor_val(char &&_sensor_val)
    {
        m_sensor_val = std::move(_sensor_val);
    }

    /*!
     * @brief This function returns a constant reference to member sensor_val
     * @return Constant reference to member sensor_val
     */
    inline eProsima_user_DllExport const char& sensor_val() const
    {
        return m_sensor_val;
    }

    /*!
     * @brief This function returns a reference to member sensor_val
     * @return Reference to member sensor_val
     */
    inline eProsima_user_DllExport char& sensor_val()
    {
        return m_sensor_val;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const GeoLocation& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    std::string m_sensor_id;
    char m_sensor_val;
};
/*!
 * @brief This class represents the structure Carpark defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class Carpark
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Carpark();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Carpark();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Carpark that will be copied.
     */
    eProsima_user_DllExport Carpark(const Carpark &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Carpark that will be copied.
     */
    eProsima_user_DllExport Carpark(Carpark &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Carpark that will be copied.
     */
    eProsima_user_DllExport Carpark& operator=(const Carpark &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object Carpark that will be copied.
     */
    eProsima_user_DllExport Carpark& operator=(Carpark &&x);
    
    /*!
     * @brief This function copies the value in member sensor_id
     * @param _sensor_id New value to be copied in member sensor_id
     */
    inline eProsima_user_DllExport void sensor_id(const std::string &_sensor_id)
    {
        m_sensor_id = _sensor_id;
    }

    /*!
     * @brief This function moves the value in member sensor_id
     * @param _sensor_id New value to be moved in member sensor_id
     */
    inline eProsima_user_DllExport void sensor_id(std::string &&_sensor_id)
    {
        m_sensor_id = std::move(_sensor_id);
    }

    /*!
     * @brief This function returns a constant reference to member sensor_id
     * @return Constant reference to member sensor_id
     */
    inline eProsima_user_DllExport const std::string& sensor_id() const
    {
        return m_sensor_id;
    }

    /*!
     * @brief This function returns a reference to member sensor_id
     * @return Reference to member sensor_id
     */
    inline eProsima_user_DllExport std::string& sensor_id()
    {
        return m_sensor_id;
    }
    /*!
     * @brief This function copies the value in member sensor_val
     * @param _sensor_val New value to be copied in member sensor_val
     */
    inline eProsima_user_DllExport void sensor_val(const bool &_sensor_val)
    {
        m_sensor_val = _sensor_val;
    }

    /*!
     * @brief This function moves the value in member sensor_val
     * @param _sensor_val New value to be moved in member sensor_val
     */
    inline eProsima_user_DllExport void sensor_val(bool &&_sensor_val)
    {
        m_sensor_val = std::move(_sensor_val);
    }

    /*!
     * @brief This function returns a constant reference to member sensor_val
     * @return Constant reference to member sensor_val
     */
    inline eProsima_user_DllExport const bool& sensor_val() const
    {
        return m_sensor_val;
    }

    /*!
     * @brief This function returns a reference to member sensor_val
     * @return Reference to member sensor_val
     */
    inline eProsima_user_DllExport bool& sensor_val()
    {
        return m_sensor_val;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const Carpark& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    std::string m_sensor_id;
    bool m_sensor_val;
};

#endif // _ddsDemo_H_