// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file ddsDemoPubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _DDSDEMO_PUBSUBTYPES_H_
#define _DDSDEMO_PUBSUBTYPES_H_

#include <fastrtps/TopicDataType.h>

using namespace eprosima::fastrtps;

#include "ddsDemo.h"

/*!
 * @brief This class represents the TopicDataType of the type LamppostsCtrl defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class LamppostsCtrlPubSubType : public TopicDataType {
public:
        typedef LamppostsCtrl type;

	LamppostsCtrlPubSubType();
	virtual ~LamppostsCtrlPubSubType();
	bool serialize(void *data, SerializedPayload_t *payload);
	bool deserialize(SerializedPayload_t *payload, void *data);
        std::function<uint32_t()> getSerializedSizeProvider(void* data);
	bool getKey(void *data, InstanceHandle_t *ihandle);
	void* createData();
	void deleteData(void * data);
	MD5 m_md5;
	unsigned char* m_keyBuffer;
};
/*!
 * @brief This class represents the TopicDataType of the type LamppostsBC defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class LamppostsBCPubSubType : public TopicDataType {
public:
        typedef LamppostsBC type;

	LamppostsBCPubSubType();
	virtual ~LamppostsBCPubSubType();
	bool serialize(void *data, SerializedPayload_t *payload);
	bool deserialize(SerializedPayload_t *payload, void *data);
        std::function<uint32_t()> getSerializedSizeProvider(void* data);
	bool getKey(void *data, InstanceHandle_t *ihandle);
	void* createData();
	void deleteData(void * data);
	MD5 m_md5;
	unsigned char* m_keyBuffer;
};
/*!
 * @brief This class represents the TopicDataType of the type Trafficlight defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class TrafficlightPubSubType : public TopicDataType {
public:
        typedef Trafficlight type;

	TrafficlightPubSubType();
	virtual ~TrafficlightPubSubType();
	bool serialize(void *data, SerializedPayload_t *payload);
	bool deserialize(SerializedPayload_t *payload, void *data);
        std::function<uint32_t()> getSerializedSizeProvider(void* data);
	bool getKey(void *data, InstanceHandle_t *ihandle);
	void* createData();
	void deleteData(void * data);
	MD5 m_md5;
	unsigned char* m_keyBuffer;
};
/*!
 * @brief This class represents the TopicDataType of the type Priority defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class PriorityPubSubType : public TopicDataType {
public:
        typedef Priority type;

	PriorityPubSubType();
	virtual ~PriorityPubSubType();
	bool serialize(void *data, SerializedPayload_t *payload);
	bool deserialize(SerializedPayload_t *payload, void *data);
        std::function<uint32_t()> getSerializedSizeProvider(void* data);
	bool getKey(void *data, InstanceHandle_t *ihandle);
	void* createData();
	void deleteData(void * data);
	MD5 m_md5;
	unsigned char* m_keyBuffer;
};
/*!
 * @brief This class represents the TopicDataType of the type Humidity defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class HumidityPubSubType : public TopicDataType {
public:
        typedef Humidity type;

	HumidityPubSubType();
	virtual ~HumidityPubSubType();
	bool serialize(void *data, SerializedPayload_t *payload);
	bool deserialize(SerializedPayload_t *payload, void *data);
        std::function<uint32_t()> getSerializedSizeProvider(void* data);
	bool getKey(void *data, InstanceHandle_t *ihandle);
	void* createData();
	void deleteData(void * data);
	MD5 m_md5;
	unsigned char* m_keyBuffer;
};
/*!
 * @brief This class represents the TopicDataType of the type Temperature defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class TemperaturePubSubType : public TopicDataType {
public:
        typedef Temperature type;

	TemperaturePubSubType();
	virtual ~TemperaturePubSubType();
	bool serialize(void *data, SerializedPayload_t *payload);
	bool deserialize(SerializedPayload_t *payload, void *data);
        std::function<uint32_t()> getSerializedSizeProvider(void* data);
	bool getKey(void *data, InstanceHandle_t *ihandle);
	void* createData();
	void deleteData(void * data);
	MD5 m_md5;
	unsigned char* m_keyBuffer;
};
/*!
 * @brief This class represents the TopicDataType of the type Light defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class LightPubSubType : public TopicDataType {
public:
        typedef Light type;

	LightPubSubType();
	virtual ~LightPubSubType();
	bool serialize(void *data, SerializedPayload_t *payload);
	bool deserialize(SerializedPayload_t *payload, void *data);
        std::function<uint32_t()> getSerializedSizeProvider(void* data);
	bool getKey(void *data, InstanceHandle_t *ihandle);
	void* createData();
	void deleteData(void * data);
	MD5 m_md5;
	unsigned char* m_keyBuffer;
};
/*!
 * @brief This class represents the TopicDataType of the type Speeding defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class SpeedingPubSubType : public TopicDataType {
public:
        typedef Speeding type;

	SpeedingPubSubType();
	virtual ~SpeedingPubSubType();
	bool serialize(void *data, SerializedPayload_t *payload);
	bool deserialize(SerializedPayload_t *payload, void *data);
        std::function<uint32_t()> getSerializedSizeProvider(void* data);
	bool getKey(void *data, InstanceHandle_t *ihandle);
	void* createData();
	void deleteData(void * data);
	MD5 m_md5;
	unsigned char* m_keyBuffer;
};
/*!
 * @brief This class represents the TopicDataType of the type GeoLocation defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class GeoLocationPubSubType : public TopicDataType {
public:
        typedef GeoLocation type;

	GeoLocationPubSubType();
	virtual ~GeoLocationPubSubType();
	bool serialize(void *data, SerializedPayload_t *payload);
	bool deserialize(SerializedPayload_t *payload, void *data);
        std::function<uint32_t()> getSerializedSizeProvider(void* data);
	bool getKey(void *data, InstanceHandle_t *ihandle);
	void* createData();
	void deleteData(void * data);
	MD5 m_md5;
	unsigned char* m_keyBuffer;
};
/*!
 * @brief This class represents the TopicDataType of the type Carpark defined by the user in the IDL file.
 * @ingroup DDSDEMO
 */
class CarparkPubSubType : public TopicDataType {
public:
        typedef Carpark type;

	CarparkPubSubType();
	virtual ~CarparkPubSubType();
	bool serialize(void *data, SerializedPayload_t *payload);
	bool deserialize(SerializedPayload_t *payload, void *data);
        std::function<uint32_t()> getSerializedSizeProvider(void* data);
	bool getKey(void *data, InstanceHandle_t *ihandle);
	void* createData();
	void deleteData(void * data);
	MD5 m_md5;
	unsigned char* m_keyBuffer;
};

#endif // _ddsDemo_PUBSUBTYPE_H_